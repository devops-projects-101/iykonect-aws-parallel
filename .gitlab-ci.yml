variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state
  AWS_DEFAULT_REGION: eu-west-1

stages:
  - prepare
  - validate
  - plan
  - apply
  - destroy

.aws-base:
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  variables:
    AWS_DEFAULT_REGION: eu-west-1
  before_script:
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

prepare-s3:
  extends: .aws-base
  stage: prepare
  script:
    # Upload credentials to S3
    - |
      cat << EOF > credentials.sh
      export AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'
      export AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'
      export AWS_REGION='${AWS_REGION}'
      export AWS_DEFAULT_REGION='${AWS_REGION}'
      EOF
      
      aws s3 cp credentials.sh s3://iykonect-aws-parallel/credentials.sh
      
      if ! aws s3api head-object --bucket iykonect-aws-parallel --key credentials.sh; then
        echo "ERROR: Failed to verify credentials.sh in S3"
        rm credentials.sh
        exit 1
      fi
      
      aws s3 cp s3://iykonect-aws-parallel/credentials.sh credentials_verify.sh
      if ! grep -q "AWS_ACCESS_KEY_ID" credentials_verify.sh; then
        echo "ERROR: Credentials file content validation failed"
        rm credentials.sh credentials_verify.sh
        exit 1
      fi
      
      echo "Successfully uploaded and verified credentials file"
      rm credentials.sh credentials_verify.sh

.terraform-base:
  image:
    name: hashicorp/terraform:1.6.6
    entrypoint: [""]
  before_script:
    - cd ${TF_ROOT}
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION=eu-west-1

init:
  extends: .terraform-base
  stage: validate
  script:
    - terraform init
    - terraform validate
  needs:
    - prepare-s3

plan:
  extends: .terraform-base
  stage: plan
  script:
    - terraform plan -no-color -out=plan.tfplan
  artifacts:
    paths:
      - plan.tfplan
    reports:
      terraform: plan.tfplan
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - init

apply:
  extends: .terraform-base
  stage: apply
  script:
    - terraform apply -auto-approve plan.tfplan
  dependencies:
    - plan
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $TERRAFORM_APPLY == "true"
      when: manual
  needs:
    - plan

destroy:
  extends: .terraform-base
  stage: destroy
  script:
    - terraform destroy -auto-approve
  rules:
    - if: $TERRAFORM_DESTROY == "true"
      when: manual
  needs:
    - prepare-s3

recreate-ec2:
  extends: .terraform-base
  stage: apply
  script:
    - terraform destroy -target=module.ec2.aws_instance.main -auto-approve
    - terraform apply -target=module.ec2.aws_instance.main -auto-approve
  rules:
    - if: $TERRAFORM_RECREATE_EC2 == "true"
      when: manual
  needs:
    - prepare-s3