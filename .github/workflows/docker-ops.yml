name: 'Recreate All Containers'


on:
  push:
    branches:
      - '**'  # This will match all branches

permissions:
  contents: read

jobs:
  recreate-containers:
    name: 'Recreate All Containers'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        audience: sts.amazonaws.com

    - name: Get EC2 Instance ID
      id: get-instance
      run: |
        aws s3 cp s3://iykonect-aws-parallel/terraform.tfstate /tmp/terraform.tfstate
        INSTANCE_ID=$(cat /tmp/terraform.tfstate | jq -r '.outputs.instance_id.value')
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Recreate All Containers
      env:
        INSTANCE_ID: ${{ steps.get-instance.outputs.instance_id }}
      run: |
        # Send recreate command through SSM
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            'set -e',
            'source /etc/docker-config.env',
            
            'ssm_log \"=== Starting Recreation of All Containers ====\"',
            
            'ssm_log \"Refreshing ECR login...\"',
            'aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY',
            
            'ssm_log \"Stopping all containers...\"',
            'docker stop redis_service api prometheus grafana-app react-app renderer || true',
            'docker rm redis_service api prometheus grafana-app react-app renderer || true',
            
            'ssm_log \"Removing old images...\"',
            'docker system prune -f',
            
            'ssm_log \"Starting Redis...\"',
            'docker run -d --network app-network --restart always --name redis_service -p $REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              $REDIS_IMAGE \
              redis-server --requirepass $REDIS_PASSWORD --bind 0.0.0.0',
            
            'ssm_log \"Starting API...\"',
            'docker run -d --network app-network --restart always --name api -p $API_PORT $API_IMAGE',
            
            'ssm_log \"Starting Prometheus...\"',
            'docker run -d --network app-network --restart always --name prometheus -p $PROMETHEUS_PORT $PROMETHEUS_IMAGE',
            
            'ssm_log \"Starting Grafana...\"',
            'docker run -d --network app-network --restart always --name grafana-app -p $GRAFANA_PORT \
              --user root \
              $GRAFANA_IMAGE',
            
            'ssm_log \"Starting React...\"',
            'docker run -d --network app-network --restart always --name react-app -p $REACT_PORT $REACT_IMAGE',
            
            'ssm_log \"Starting Renderer...\"',
            'docker run -d --network app-network --restart always --name renderer -p $RENDERER_PORT $RENDERER_IMAGE',
            
            'sleep 10',
            
            'ssm_log \"=== Container Statuses ===\"',
            'docker ps --format \"{{.Names}}: {{.Status}}\"',
            
            'ssm_log \"=== All Containers Recreation Complete ====\"'
          ]" \
          --output text