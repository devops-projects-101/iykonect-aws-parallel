name: 'Container Management'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to use'
        required: true
        type: string
        default: ${{ github.ref_name }}

permissions:
  contents: read

jobs:
  container-ops:
    name: 'Recreate All Containers'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout specific branch
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch }}
        fetch-depth: 0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        audience: sts.amazonaws.com

    - name: Get EC2 Instance ID
      id: get-instance
      run: |
        # Download and verify terraform state
        if ! aws s3 cp s3://iykonect-aws-parallel/terraform.tfstate /tmp/terraform.tfstate; then
          echo "Error: Failed to download terraform state file"
          exit 1
        fi

        # Check if file exists and is not empty
        if [ ! -s /tmp/terraform.tfstate ]; then
          echo "Error: Terraform state file is empty or does not exist"
          exit 1
        fi

        # Extract and validate instance ID
        INSTANCE_ID=$(cat /tmp/terraform.tfstate | jq -r '.outputs.instance_id.value')
        
        if [ "$INSTANCE_ID" = "null" ] || [ -z "$INSTANCE_ID" ]; then
          echo "Error: Could not find instance ID in terraform state"
          echo "State file content:"
          cat /tmp/terraform.tfstate
          exit 1
        fi

        if [[ ! "$INSTANCE_ID" =~ ^i-[a-zA-Z0-9]{8,17}$ ]]; then
          echo "Error: Invalid instance ID format: $INSTANCE_ID"
          exit 1
        fi

        echo "Found Instance ID: $INSTANCE_ID"
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Verify EC2 Instance
      env:
        INSTANCE_ID: ${{ steps.get-instance.outputs.instance_id }}
      run: |
        # Verify instance exists and is running
        STATUS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text || echo "error")
        if [ "$STATUS" != "running" ]; then
          echo "Error: Instance $INSTANCE_ID is not running (status: $STATUS)"
          exit 1
        fi
        echo "Instance is running"

        # Verify SSM agent is connected
        PING_STATUS=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query 'InstanceInformationList[0].PingStatus' --output text || echo "error")
        if [ "$PING_STATUS" != "Online" ]; then
          echo "Error: SSM agent is not connected on instance $INSTANCE_ID (status: $PING_STATUS)"
          exit 1
        fi
        echo "SSM agent is connected"

    - name: Recreate All Containers
      env:
        INSTANCE_ID: ${{ steps.get-instance.outputs.instance_id }}
      run: |
        echo "ðŸ”„ Starting recreation of ALL containers using branch: ${{ github.event.inputs.branch }}"
        
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            'set -e',
            'source /etc/docker-config.env',
            
            'ssm_log \"=== Starting Recreation of All Containers ====\"',
            'ssm_log \"Using branch: ${{ github.event.inputs.branch }}\"',
            
            'ssm_log \"Refreshing ECR login...\"',
            'aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY',
            
            'ssm_log \"Stopping all containers...\"',
            'docker stop redis_service api prometheus grafana-app react-app renderer || true',
            'docker rm redis_service api prometheus grafana-app react-app renderer || true',
            
            'ssm_log \"Removing old images...\"',
            'docker system prune -f',
            
            'ssm_log \"Starting Redis...\"',
            'docker run -d --network app-network --restart always --name redis_service -p $REDIS_PORT \
              -e REDIS_PASSWORD=$REDIS_PASSWORD \
              $REDIS_IMAGE \
              redis-server --requirepass $REDIS_PASSWORD --bind 0.0.0.0',
            
            'ssm_log \"Starting API...\"',
            'docker run -d --network app-network --restart always --name api -p $API_PORT $API_IMAGE',
            
            'ssm_log \"Starting Prometheus...\"',
            'docker run -d --network app-network --restart always --name prometheus -p $PROMETHEUS_PORT $PROMETHEUS_IMAGE',
            
            'ssm_log \"Starting Grafana...\"',
            'docker run -d --network app-network --restart always --name grafana-app -p $GRAFANA_PORT \
              --user root \
              $GRAFANA_IMAGE',
            
            'ssm_log \"Starting React...\"',
            'docker run -d --network app-network --restart always --name react-app -p $REACT_PORT $REACT_IMAGE',
            
            'ssm_log \"Starting Renderer...\"',
            'docker run -d --network app-network --restart always --name renderer -p $RENDERER_PORT $RENDERER_IMAGE',
            
            'sleep 10',
            
            'ssm_log \"=== Container Statuses ===\"',
            'docker ps --format \"{{.Names}}: {{.Status}}\"',
            
            'ssm_log \"=== All Containers Recreation Complete ====\"'
          ]" \
          --output text