name: 'Iykons deploy'

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        required: true
        default: 'create_infra'
        options:
          - create_infra
          - destroy_infra

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        audience: sts.amazonaws.com

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.6.6'

    - name: Create S3 bucket for Terraform state
      run: |
        aws s3api head-bucket --bucket iykonect-aws-parallel 2>/dev/null || \
        aws s3api create-bucket --bucket iykonect-aws-parallel --region us-east-1

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: |
        echo "Generating Terraform plan and JSON output..."
        
        # # Create a plan file
        # terraform plan -out=plan.out
        
        
        # Generate human-readable plan for PR comments
        terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          # const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          # #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Apply Infrastructure Changes
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create_infra')


      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: |
        # Always destroy EC2 and related resources first
        terraform destroy -target=module.ec2.aws_instance.main \
                        -target=module.ec2.aws_iam_role.ec2_role \
                        -target=module.ec2.aws_iam_role_policy.s3_access \
                        -target=module.ec2.aws_iam_role_policy.ecr_access \
                        -target=module.ec2.aws_iam_instance_profile.ec2_profile \
                        -auto-approve

        # Apply all changes including new EC2
        terraform apply -auto-approve


    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy_infra'
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: terraform destroy -auto-approve -input=false

