name: 'Iykons Azure Deploy'

on:
  push:
    paths:
      - 'terraform-azure/**'
      - '.github/workflows/terraform-azure.yml'
  pull_request:
    paths:
      - 'terraform-azure/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        required: true
        default: 'plan_azure_infra'
        options:
          - plan_azure_infra
          - create_azure_infra
          - destroy_azure_infra

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-azure:
    name: 'Terraform Azure'
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'workflow_dispatch') || 
      (github.event_name == 'workflow_dispatch' && contains(fromJSON('["plan_azure_infra", "create_azure_infra", "destroy_azure_infra"]'), github.event.inputs.action))

    defaults:
      run:
        working-directory: ./terraform-azure

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials for ECR Access
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        audience: sts.amazonaws.com

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

    - name: Create Azure Storage for Terraform State
      run: |
        # Check if resource group exists, create if not
        az group show --name tfstate 2>/dev/null || \
        az group create --name tfstate --location westeurope

        # Check if storage account exists, create if not
        az storage account show --name iykonecttfstate --resource-group tfstate 2>/dev/null || \
        az storage account create --name iykonecttfstate --resource-group tfstate --location westeurope --sku Standard_LRS --kind StorageV2

        # Check if container exists, create if not
        az storage container show --name tfstate --account-name iykonecttfstate 2>/dev/null || \
        az storage container create --name tfstate --account-name iykonecttfstate --auth-mode login

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.6.6'

    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_azure_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_azure_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_azure_client_id: ${{ secrets.ARM_CLIENT_ID }}
        TF_VAR_azure_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
        TF_VAR_admin_password: ${{ secrets.AZURE_VM_ADMIN_PASSWORD }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        echo "Generating Terraform plan for Azure infrastructure..."
        terraform plan -var-file=terraform.tfvars -no-color -input=false
      continue-on-error: true

    - name: Apply Azure Infrastructure Changes
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create_azure_infra'
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_azure_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_azure_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_azure_client_id: ${{ secrets.ARM_CLIENT_ID }}
        TF_VAR_azure_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
        TF_VAR_admin_password: ${{ secrets.AZURE_VM_ADMIN_PASSWORD }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        echo "Applying Azure infrastructure changes..."
        terraform apply -var-file=terraform.tfvars -auto-approve

    - name: Terraform Destroy Azure Infrastructure
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy_azure_infra'
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_azure_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_azure_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_azure_client_id: ${{ secrets.ARM_CLIENT_ID }}
        TF_VAR_azure_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
        TF_VAR_admin_password: ${{ secrets.AZURE_VM_ADMIN_PASSWORD }}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        echo "Destroying Azure infrastructure..."
        terraform destroy -var-file=terraform.tfvars -auto-approve -input=false